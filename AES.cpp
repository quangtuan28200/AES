#include <iostream>
#include <algorithm>
#include <conio.h>
#include <cstring>
#include <sstream>
#include <fstream>
#include <chrono>

using namespace std;
using namespace std::chrono;

using std::cout; using std::cerr;
using std::endl; using std::string;
using std::ifstream; using std::ostringstream;

string keyLen;
string keyInput;
string input;
string file_contents;

int Nk;
int Nr;

unsigned char* paddedMessage;
int lenOfPaddedMessage;

string hexToASCII(string hex)
{
	// initialize the ASCII code string as empty.
	string ascii = "";
	for (size_t i = 0; i < hex.length(); i += 2)
	{
		// extract two characters from hex string
		string part = hex.substr(i, 2);

		// change it into base 16 and
		// typecast as the character
		char ch = stoul(part, nullptr, 16);

		// add this char to final ASCII string
		ascii += ch;
	}
	return ascii;
}

std::string ReplaceAll(std::string str, const std::string& from, const std::string& to) {
    size_t start_pos = 0;
    while((start_pos = str.find(from, start_pos)) != std::string::npos) {
        str.replace(start_pos, from.length(), to);
        start_pos += to.length(); // Handles case where 'to' is a substring of 'from'
    }
    return str;
}

string readFile(string filePath){
    // Create a text string, which is used to output the text file
    string fileContent = "";
    string myText;

    // Read from the text file
    ifstream MyReadFile(filePath);

    // Use a while loop together with the getline() function to read the file line by line
    while (getline (MyReadFile, myText)) {
        // Output the text from the file
        fileContent += myText;
    }

    // Close the file
    MyReadFile.close();

    return fileContent;
}
 
void writeFile(string fileContent, string path){
// Create and open a text file
  ofstream MyFile(path);

  // Write to the file
  MyFile << fileContent;

  // Close the file
  MyFile.close();
}

unsigned char s[256] = {
    0x63, 0x7C, 0x77, 0x7B, 0xF2, 0x6B, 0x6F, 0xC5, 0x30, 0x01, 0x67, 0x2B, 0xFE, 0xD7, 0xAB, 0x76,
    0xCA, 0x82, 0xC9, 0x7D, 0xFA, 0x59, 0x47, 0xF0, 0xAD, 0xD4, 0xA2, 0xAF, 0x9C, 0xA4, 0x72, 0xC0,
    0xB7, 0xFD, 0x93, 0x26, 0x36, 0x3F, 0xF7, 0xCC, 0x34, 0xA5, 0xE5, 0xF1, 0x71, 0xD8, 0x31, 0x15,
    0x04, 0xC7, 0x23, 0xC3, 0x18, 0x96, 0x05, 0x9A, 0x07, 0x12, 0x80, 0xE2, 0xEB, 0x27, 0xB2, 0x75,
    0x09, 0x83, 0x2C, 0x1A, 0x1B, 0x6E, 0x5A, 0xA0, 0x52, 0x3B, 0xD6, 0xB3, 0x29, 0xE3, 0x2F, 0x84,
    0x53, 0xD1, 0x00, 0xED, 0x20, 0xFC, 0xB1, 0x5B, 0x6A, 0xCB, 0xBE, 0x39, 0x4A, 0x4C, 0x58, 0xCF,
    0xD0, 0xEF, 0xAA, 0xFB, 0x43, 0x4D, 0x33, 0x85, 0x45, 0xF9, 0x02, 0x7F, 0x50, 0x3C, 0x9F, 0xA8,
    0x51, 0xA3, 0x40, 0x8F, 0x92, 0x9D, 0x38, 0xF5, 0xBC, 0xB6, 0xDA, 0x21, 0x10, 0xFF, 0xF3, 0xD2,
    0xCD, 0x0C, 0x13, 0xEC, 0x5F, 0x97, 0x44, 0x17, 0xC4, 0xA7, 0x7E, 0x3D, 0x64, 0x5D, 0x19, 0x73,
    0x60, 0x81, 0x4F, 0xDC, 0x22, 0x2A, 0x90, 0x88, 0x46, 0xEE, 0xB8, 0x14, 0xDE, 0x5E, 0x0B, 0xDB,
    0xE0, 0x32, 0x3A, 0x0A, 0x49, 0x06, 0x24, 0x5C, 0xC2, 0xD3, 0xAC, 0x62, 0x91, 0x95, 0xE4, 0x79,
    0xE7, 0xC8, 0x37, 0x6D, 0x8D, 0xD5, 0x4E, 0xA9, 0x6C, 0x56, 0xF4, 0xEA, 0x65, 0x7A, 0xAE, 0x08,
    0xBA, 0x78, 0x25, 0x2E, 0x1C, 0xA6, 0xB4, 0xC6, 0xE8, 0xDD, 0x74, 0x1F, 0x4B, 0xBD, 0x8B, 0x8A,
    0x70, 0x3E, 0xB5, 0x66, 0x48, 0x03, 0xF6, 0x0E, 0x61, 0x35, 0x57, 0xB9, 0x86, 0xC1, 0x1D, 0x9E,
    0xE1, 0xF8, 0x98, 0x11, 0x69, 0xD9, 0x8E, 0x94, 0x9B, 0x1E, 0x87, 0xE9, 0xCE, 0x55, 0x28, 0xDF,
    0x8C, 0xA1, 0x89, 0x0D, 0xBF, 0xE6, 0x42, 0x68, 0x41, 0x99, 0x2D, 0x0F, 0xB0, 0x54, 0xBB, 0x16
};

unsigned char InvS[256] = {
    0x52, 0x09, 0x6a, 0xd5, 0x30, 0x36, 0xa5, 0x38, 0xbf, 0x40, 0xa3, 0x9e, 0x81, 0xf3, 0xd7, 0xfb, 
    0x7c, 0xe3, 0x39, 0x82, 0x9b, 0x2f, 0xff, 0x87, 0x34, 0x8e, 0x43, 0x44, 0xc4, 0xde, 0xe9, 0xcb, 
    0x54, 0x7b, 0x94, 0x32, 0xa6, 0xc2, 0x23, 0x3d, 0xee, 0x4c, 0x95, 0x0b, 0x42, 0xfa, 0xc3, 0x4e, 
    0x08, 0x2e, 0xa1, 0x66, 0x28, 0xd9, 0x24, 0xb2, 0x76, 0x5b, 0xa2, 0x49, 0x6d, 0x8b, 0xd1, 0x25, 
    0x72, 0xf8, 0xf6, 0x64, 0x86, 0x68, 0x98, 0x16, 0xd4, 0xa4, 0x5c, 0xcc, 0x5d, 0x65, 0xb6, 0x92, 
    0x6c, 0x70, 0x48, 0x50, 0xfd, 0xed, 0xb9, 0xda, 0x5e, 0x15, 0x46, 0x57, 0xa7, 0x8d, 0x9d, 0x84, 
    0x90, 0xd8, 0xab, 0x00, 0x8c, 0xbc, 0xd3, 0x0a, 0xf7, 0xe4, 0x58, 0x05, 0xb8, 0xb3, 0x45, 0x06, 
    0xd0, 0x2c, 0x1e, 0x8f, 0xca, 0x3f, 0x0f, 0x02, 0xc1, 0xaf, 0xbd, 0x03, 0x01, 0x13, 0x8a, 0x6b, 
    0x3a, 0x91, 0x11, 0x41, 0x4f, 0x67, 0xdc, 0xea, 0x97, 0xf2, 0xcf, 0xce, 0xf0, 0xb4, 0xe6, 0x73, 
    0x96, 0xac, 0x74, 0x22, 0xe7, 0xad, 0x35, 0x85, 0xe2, 0xf9, 0x37, 0xe8, 0x1c, 0x75, 0xdf, 0x6e, 
    0x47, 0xf1, 0x1a, 0x71, 0x1d, 0x29, 0xc5, 0x89, 0x6f, 0xb7, 0x62, 0x0e, 0xaa, 0x18, 0xbe, 0x1b, 
    0xfc, 0x56, 0x3e, 0x4b, 0xc6, 0xd2, 0x79, 0x20, 0x9a, 0xdb, 0xc0, 0xfe, 0x78, 0xcd, 0x5a, 0xf4, 
    0x1f, 0xdd, 0xa8, 0x33, 0x88, 0x07, 0xc7, 0x31, 0xb1, 0x12, 0x10, 0x59, 0x27, 0x80, 0xec, 0x5f, 
    0x60, 0x51, 0x7f, 0xa9, 0x19, 0xb5, 0x4a, 0x0d, 0x2d, 0xe5, 0x7a, 0x9f, 0x93, 0xc9, 0x9c, 0xef, 
    0xa0, 0xe0, 0x3b, 0x4d, 0xae, 0x2a, 0xf5, 0xb0, 0xc8, 0xeb, 0xbb, 0x3c, 0x83, 0x53, 0x99, 0x61, 
    0x17, 0x2b, 0x04, 0x7e, 0xba, 0x77, 0xd6, 0x26, 0xe1, 0x69, 0x14, 0x63, 0x55, 0x21, 0x0c, 0x7d
};

unsigned char mul2[] = {
    0x00,0x02,0x04,0x06,0x08,0x0a,0x0c,0x0e,0x10,0x12,0x14,0x16,0x18,0x1a,0x1c,0x1e,
    0x20,0x22,0x24,0x26,0x28,0x2a,0x2c,0x2e,0x30,0x32,0x34,0x36,0x38,0x3a,0x3c,0x3e,
    0x40,0x42,0x44,0x46,0x48,0x4a,0x4c,0x4e,0x50,0x52,0x54,0x56,0x58,0x5a,0x5c,0x5e,
    0x60,0x62,0x64,0x66,0x68,0x6a,0x6c,0x6e,0x70,0x72,0x74,0x76,0x78,0x7a,0x7c,0x7e,	
    0x80,0x82,0x84,0x86,0x88,0x8a,0x8c,0x8e,0x90,0x92,0x94,0x96,0x98,0x9a,0x9c,0x9e,
    0xa0,0xa2,0xa4,0xa6,0xa8,0xaa,0xac,0xae,0xb0,0xb2,0xb4,0xb6,0xb8,0xba,0xbc,0xbe,
    0xc0,0xc2,0xc4,0xc6,0xc8,0xca,0xcc,0xce,0xd0,0xd2,0xd4,0xd6,0xd8,0xda,0xdc,0xde,
    0xe0,0xe2,0xe4,0xe6,0xe8,0xea,0xec,0xee,0xf0,0xf2,0xf4,0xf6,0xf8,0xfa,0xfc,0xfe,
    0x1b,0x19,0x1f,0x1d,0x13,0x11,0x17,0x15,0x0b,0x09,0x0f,0x0d,0x03,0x01,0x07,0x05,
    0x3b,0x39,0x3f,0x3d,0x33,0x31,0x37,0x35,0x2b,0x29,0x2f,0x2d,0x23,0x21,0x27,0x25,
    0x5b,0x59,0x5f,0x5d,0x53,0x51,0x57,0x55,0x4b,0x49,0x4f,0x4d,0x43,0x41,0x47,0x45,
    0x7b,0x79,0x7f,0x7d,0x73,0x71,0x77,0x75,0x6b,0x69,0x6f,0x6d,0x63,0x61,0x67,0x65,
    0x9b,0x99,0x9f,0x9d,0x93,0x91,0x97,0x95,0x8b,0x89,0x8f,0x8d,0x83,0x81,0x87,0x85,
    0xbb,0xb9,0xbf,0xbd,0xb3,0xb1,0xb7,0xb5,0xab,0xa9,0xaf,0xad,0xa3,0xa1,0xa7,0xa5,
    0xdb,0xd9,0xdf,0xdd,0xd3,0xd1,0xd7,0xd5,0xcb,0xc9,0xcf,0xcd,0xc3,0xc1,0xc7,0xc5,
    0xfb,0xf9,0xff,0xfd,0xf3,0xf1,0xf7,0xf5,0xeb,0xe9,0xef,0xed,0xe3,0xe1,0xe7,0xe5
};

unsigned char mul3[]{
    0x00,0x03,0x06,0x05,0x0c,0x0f,0x0a,0x09,0x18,0x1b,0x1e,0x1d,0x14,0x17,0x12,0x11,
    0x30,0x33,0x36,0x35,0x3c,0x3f,0x3a,0x39,0x28,0x2b,0x2e,0x2d,0x24,0x27,0x22,0x21,
    0x60,0x63,0x66,0x65,0x6c,0x6f,0x6a,0x69,0x78,0x7b,0x7e,0x7d,0x74,0x77,0x72,0x71,
    0x50,0x53,0x56,0x55,0x5c,0x5f,0x5a,0x59,0x48,0x4b,0x4e,0x4d,0x44,0x47,0x42,0x41,
    0xc0,0xc3,0xc6,0xc5,0xcc,0xcf,0xca,0xc9,0xd8,0xdb,0xde,0xdd,0xd4,0xd7,0xd2,0xd1,
    0xf0,0xf3,0xf6,0xf5,0xfc,0xff,0xfa,0xf9,0xe8,0xeb,0xee,0xed,0xe4,0xe7,0xe2,0xe1,
    0xa0,0xa3,0xa6,0xa5,0xac,0xaf,0xaa,0xa9,0xb8,0xbb,0xbe,0xbd,0xb4,0xb7,0xb2,0xb1,
    0x90,0x93,0x96,0x95,0x9c,0x9f,0x9a,0x99,0x88,0x8b,0x8e,0x8d,0x84,0x87,0x82,0x81,	
    0x9b,0x98,0x9d,0x9e,0x97,0x94,0x91,0x92,0x83,0x80,0x85,0x86,0x8f,0x8c,0x89,0x8a,
    0xab,0xa8,0xad,0xae,0xa7,0xa4,0xa1,0xa2,0xb3,0xb0,0xb5,0xb6,0xbf,0xbc,0xb9,0xba,
    0xfb,0xf8,0xfd,0xfe,0xf7,0xf4,0xf1,0xf2,0xe3,0xe0,0xe5,0xe6,0xef,0xec,0xe9,0xea,	
    0xcb,0xc8,0xcd,0xce,0xc7,0xc4,0xc1,0xc2,0xd3,0xd0,0xd5,0xd6,0xdf,0xdc,0xd9,0xda,	
    0x5b,0x58,0x5d,0x5e,0x57,0x54,0x51,0x52,0x43,0x40,0x45,0x46,0x4f,0x4c,0x49,0x4a,
    0x6b,0x68,0x6d,0x6e,0x67,0x64,0x61,0x62,0x73,0x70,0x75,0x76,0x7f,0x7c,0x79,0x7a,	
    0x3b,0x38,0x3d,0x3e,0x37,0x34,0x31,0x32,0x23,0x20,0x25,0x26,0x2f,0x2c,0x29,0x2a,
    0x0b,0x08,0x0d,0x0e,0x07,0x04,0x01,0x02,0x13,0x10,0x15,0x16,0x1f,0x1c,0x19,0x1a
};

unsigned char mulE[]{
    0x00,0x0e,0x1c,0x12,0x38,0x36,0x24,0x2a,0x70,0x7e,0x6c,0x62,0x48,0x46,0x54,0x5a,
    0xe0,0xee,0xfc,0xf2,0xd8,0xd6,0xc4,0xca,0x90,0x9e,0x8c,0x82,0xa8,0xa6,0xb4,0xba,
    0xdb,0xd5,0xc7,0xc9,0xe3,0xed,0xff,0xf1,0xab,0xa5,0xb7,0xb9,0x93,0x9d,0x8f,0x81,
    0x3b,0x35,0x27,0x29,0x03,0x0d,0x1f,0x11,0x4b,0x45,0x57,0x59,0x73,0x7d,0x6f,0x61,
    0xad,0xa3,0xb1,0xbf,0x95,0x9b,0x89,0x87,0xdd,0xd3,0xc1,0xcf,0xe5,0xeb,0xf9,0xf7,
    0x4d,0x43,0x51,0x5f,0x75,0x7b,0x69,0x67,0x3d,0x33,0x21,0x2f,0x05,0x0b,0x19,0x17,
    0x76,0x78,0x6a,0x64,0x4e,0x40,0x52,0x5c,0x06,0x08,0x1a,0x14,0x3e,0x30,0x22,0x2c,
    0x96,0x98,0x8a,0x84,0xae,0xa0,0xb2,0xbc,0xe6,0xe8,0xfa,0xf4,0xde,0xd0,0xc2,0xcc,
    0x41,0x4f,0x5d,0x53,0x79,0x77,0x65,0x6b,0x31,0x3f,0x2d,0x23,0x09,0x07,0x15,0x1b,
    0xa1,0xaf,0xbd,0xb3,0x99,0x97,0x85,0x8b,0xd1,0xdf,0xcd,0xc3,0xe9,0xe7,0xf5,0xfb,
    0x9a,0x94,0x86,0x88,0xa2,0xac,0xbe,0xb0,0xea,0xe4,0xf6,0xf8,0xd2,0xdc,0xce,0xc0,
    0x7a,0x74,0x66,0x68,0x42,0x4c,0x5e,0x50,0x0a,0x04,0x16,0x18,0x32,0x3c,0x2e,0x20,
    0xec,0xe2,0xf0,0xfe,0xd4,0xda,0xc8,0xc6,0x9c,0x92,0x80,0x8e,0xa4,0xaa,0xb8,0xb6,
    0x0c,0x02,0x10,0x1e,0x34,0x3a,0x28,0x26,0x7c,0x72,0x60,0x6e,0x44,0x4a,0x58,0x56,
    0x37,0x39,0x2b,0x25,0x0f,0x01,0x13,0x1d,0x47,0x49,0x5b,0x55,0x7f,0x71,0x63,0x6d,
    0xd7,0xd9,0xcb,0xc5,0xef,0xe1,0xf3,0xfd,0xa7,0xa9,0xbb,0xb5,0x9f,0x91,0x83,0x8d
};

unsigned char mulB[]{
    0x00,0x0b,0x16,0x1d,0x2c,0x27,0x3a,0x31,0x58,0x53,0x4e,0x45,0x74,0x7f,0x62,0x69,
    0xb0,0xbb,0xa6,0xad,0x9c,0x97,0x8a,0x81,0xe8,0xe3,0xfe,0xf5,0xc4,0xcf,0xd2,0xd9,
    0x7b,0x70,0x6d,0x66,0x57,0x5c,0x41,0x4a,0x23,0x28,0x35,0x3e,0x0f,0x04,0x19,0x12,
    0xcb,0xc0,0xdd,0xd6,0xe7,0xec,0xf1,0xfa,0x93,0x98,0x85,0x8e,0xbf,0xb4,0xa9,0xa2,
    0xf6,0xfd,0xe0,0xeb,0xda,0xd1,0xcc,0xc7,0xae,0xa5,0xb8,0xb3,0x82,0x89,0x94,0x9f,
    0x46,0x4d,0x50,0x5b,0x6a,0x61,0x7c,0x77,0x1e,0x15,0x08,0x03,0x32,0x39,0x24,0x2f,
    0x8d,0x86,0x9b,0x90,0xa1,0xaa,0xb7,0xbc,0xd5,0xde,0xc3,0xc8,0xf9,0xf2,0xef,0xe4,
    0x3d,0x36,0x2b,0x20,0x11,0x1a,0x07,0x0c,0x65,0x6e,0x73,0x78,0x49,0x42,0x5f,0x54,
    0xf7,0xfc,0xe1,0xea,0xdb,0xd0,0xcd,0xc6,0xaf,0xa4,0xb9,0xb2,0x83,0x88,0x95,0x9e,
    0x47,0x4c,0x51,0x5a,0x6b,0x60,0x7d,0x76,0x1f,0x14,0x09,0x02,0x33,0x38,0x25,0x2e,
    0x8c,0x87,0x9a,0x91,0xa0,0xab,0xb6,0xbd,0xd4,0xdf,0xc2,0xc9,0xf8,0xf3,0xee,0xe5,
    0x3c,0x37,0x2a,0x21,0x10,0x1b,0x06,0x0d,0x64,0x6f,0x72,0x79,0x48,0x43,0x5e,0x55,
    0x01,0x0a,0x17,0x1c,0x2d,0x26,0x3b,0x30,0x59,0x52,0x4f,0x44,0x75,0x7e,0x63,0x68,
    0xb1,0xba,0xa7,0xac,0x9d,0x96,0x8b,0x80,0xe9,0xe2,0xff,0xf4,0xc5,0xce,0xd3,0xd8,
    0x7a,0x71,0x6c,0x67,0x56,0x5d,0x40,0x4b,0x22,0x29,0x34,0x3f,0x0e,0x05,0x18,0x13,
    0xca,0xc1,0xdc,0xd7,0xe6,0xed,0xf0,0xfb,0x92,0x99,0x84,0x8f,0xbe,0xb5,0xa8,0xa3
};

unsigned char mulD[]{
    0x00,0x0d,0x1a,0x17,0x34,0x39,0x2e,0x23,0x68,0x65,0x72,0x7f,0x5c,0x51,0x46,0x4b,
    0xd0,0xdd,0xca,0xc7,0xe4,0xe9,0xfe,0xf3,0xb8,0xb5,0xa2,0xaf,0x8c,0x81,0x96,0x9b,
    0xbb,0xb6,0xa1,0xac,0x8f,0x82,0x95,0x98,0xd3,0xde,0xc9,0xc4,0xe7,0xea,0xfd,0xf0,
    0x6b,0x66,0x71,0x7c,0x5f,0x52,0x45,0x48,0x03,0x0e,0x19,0x14,0x37,0x3a,0x2d,0x20,
    0x6d,0x60,0x77,0x7a,0x59,0x54,0x43,0x4e,0x05,0x08,0x1f,0x12,0x31,0x3c,0x2b,0x26,
    0xbd,0xb0,0xa7,0xaa,0x89,0x84,0x93,0x9e,0xd5,0xd8,0xcf,0xc2,0xe1,0xec,0xfb,0xf6,
    0xd6,0xdb,0xcc,0xc1,0xe2,0xef,0xf8,0xf5,0xbe,0xb3,0xa4,0xa9,0x8a,0x87,0x90,0x9d,
    0x06,0x0b,0x1c,0x11,0x32,0x3f,0x28,0x25,0x6e,0x63,0x74,0x79,0x5a,0x57,0x40,0x4d,
    0xda,0xd7,0xc0,0xcd,0xee,0xe3,0xf4,0xf9,0xb2,0xbf,0xa8,0xa5,0x86,0x8b,0x9c,0x91,
    0x0a,0x07,0x10,0x1d,0x3e,0x33,0x24,0x29,0x62,0x6f,0x78,0x75,0x56,0x5b,0x4c,0x41,
    0x61,0x6c,0x7b,0x76,0x55,0x58,0x4f,0x42,0x09,0x04,0x13,0x1e,0x3d,0x30,0x27,0x2a,
    0xb1,0xbc,0xab,0xa6,0x85,0x88,0x9f,0x92,0xd9,0xd4,0xc3,0xce,0xed,0xe0,0xf7,0xfa,
    0xb7,0xba,0xad,0xa0,0x83,0x8e,0x99,0x94,0xdf,0xd2,0xc5,0xc8,0xeb,0xe6,0xf1,0xfc,
    0x67,0x6a,0x7d,0x70,0x53,0x5e,0x49,0x44,0x0f,0x02,0x15,0x18,0x3b,0x36,0x21,0x2c,
    0x0c,0x01,0x16,0x1b,0x38,0x35,0x22,0x2f,0x64,0x69,0x7e,0x73,0x50,0x5d,0x4a,0x47,
    0xdc,0xd1,0xc6,0xcb,0xe8,0xe5,0xf2,0xff,0xb4,0xb9,0xae,0xa3,0x80,0x8d,0x9a,0x97
};

unsigned char mul9[]{
    0x00,0x09,0x12,0x1b,0x24,0x2d,0x36,0x3f,0x48,0x41,0x5a,0x53,0x6c,0x65,0x7e,0x77,
    0x90,0x99,0x82,0x8b,0xb4,0xbd,0xa6,0xaf,0xd8,0xd1,0xca,0xc3,0xfc,0xf5,0xee,0xe7,
    0x3b,0x32,0x29,0x20,0x1f,0x16,0x0d,0x04,0x73,0x7a,0x61,0x68,0x57,0x5e,0x45,0x4c,
    0xab,0xa2,0xb9,0xb0,0x8f,0x86,0x9d,0x94,0xe3,0xea,0xf1,0xf8,0xc7,0xce,0xd5,0xdc,
    0x76,0x7f,0x64,0x6d,0x52,0x5b,0x40,0x49,0x3e,0x37,0x2c,0x25,0x1a,0x13,0x08,0x01,
    0xe6,0xef,0xf4,0xfd,0xc2,0xcb,0xd0,0xd9,0xae,0xa7,0xbc,0xb5,0x8a,0x83,0x98,0x91,
    0x4d,0x44,0x5f,0x56,0x69,0x60,0x7b,0x72,0x05,0x0c,0x17,0x1e,0x21,0x28,0x33,0x3a,
    0xdd,0xd4,0xcf,0xc6,0xf9,0xf0,0xeb,0xe2,0x95,0x9c,0x87,0x8e,0xb1,0xb8,0xa3,0xaa,	
    0xec,0xe5,0xfe,0xf7,0xc8,0xc1,0xda,0xd3,0xa4,0xad,0xb6,0xbf,0x80,0x89,0x92,0x9b,	
    0x7c,0x75,0x6e,0x67,0x58,0x51,0x4a,0x43,0x34,0x3d,0x26,0x2f,0x10,0x19,0x02,0x0b,
    0xd7,0xde,0xc5,0xcc,0xf3,0xfa,0xe1,0xe8,0x9f,0x96,0x8d,0x84,0xbb,0xb2,0xa9,0xa0,
    0x47,0x4e,0x55,0x5c,0x63,0x6a,0x71,0x78,0x0f,0x06,0x1d,0x14,0x2b,0x22,0x39,0x30,
    0x9a,0x93,0x88,0x81,0xbe,0xb7,0xac,0xa5,0xd2,0xdb,0xc0,0xc9,0xf6,0xff,0xe4,0xed,
    0x0a,0x03,0x18,0x11,0x2e,0x27,0x3c,0x35,0x42,0x4b,0x50,0x59,0x66,0x6f,0x74,0x7d,	
    0xa1,0xa8,0xb3,0xba,0x85,0x8c,0x97,0x9e,0xe9,0xe0,0xfb,0xf2,0xcd,0xc4,0xdf,0xd6,
    0x31,0x38,0x23,0x2a,0x15,0x1c,0x07,0x0e,0x79,0x70,0x6b,0x62,0x5d,0x54,0x4f,0x46
};

unsigned char Rcon[256] = {
    0x8d, 0x01, 0x02, 0x04, 0x08, 0x10, 0x20, 0x40, 0x80, 0x1b, 0x36, 0x6c, 0xd8, 0xab, 0x4d, 0x9a, 
    0x2f, 0x5e, 0xbc, 0x63, 0xc6, 0x97, 0x35, 0x6a, 0xd4, 0xb3, 0x7d, 0xfa, 0xef, 0xc5, 0x91, 0x39, 
    0x72, 0xe4, 0xd3, 0xbd, 0x61, 0xc2, 0x9f, 0x25, 0x4a, 0x94, 0x33, 0x66, 0xcc, 0x83, 0x1d, 0x3a, 
    0x74, 0xe8, 0xcb, 0x8d, 0x01, 0x02, 0x04, 0x08, 0x10, 0x20, 0x40, 0x80, 0x1b, 0x36, 0x6c, 0xd8, 
    0xab, 0x4d, 0x9a, 0x2f, 0x5e, 0xbc, 0x63, 0xc6, 0x97, 0x35, 0x6a, 0xd4, 0xb3, 0x7d, 0xfa, 0xef, 
    0xc5, 0x91, 0x39, 0x72, 0xe4, 0xd3, 0xbd, 0x61, 0xc2, 0x9f, 0x25, 0x4a, 0x94, 0x33, 0x66, 0xcc, 
    0x83, 0x1d, 0x3a, 0x74, 0xe8, 0xcb, 0x8d, 0x01, 0x02, 0x04, 0x08, 0x10, 0x20, 0x40, 0x80, 0x1b, 
    0x36, 0x6c, 0xd8, 0xab, 0x4d, 0x9a, 0x2f, 0x5e, 0xbc, 0x63, 0xc6, 0x97, 0x35, 0x6a, 0xd4, 0xb3, 
    0x7d, 0xfa, 0xef, 0xc5, 0x91, 0x39, 0x72, 0xe4, 0xd3, 0xbd, 0x61, 0xc2, 0x9f, 0x25, 0x4a, 0x94, 
    0x33, 0x66, 0xcc, 0x83, 0x1d, 0x3a, 0x74, 0xe8, 0xcb, 0x8d, 0x01, 0x02, 0x04, 0x08, 0x10, 0x20, 
    0x40, 0x80, 0x1b, 0x36, 0x6c, 0xd8, 0xab, 0x4d, 0x9a, 0x2f, 0x5e, 0xbc, 0x63, 0xc6, 0x97, 0x35, 
    0x6a, 0xd4, 0xb3, 0x7d, 0xfa, 0xef, 0xc5, 0x91, 0x39, 0x72, 0xe4, 0xd3, 0xbd, 0x61, 0xc2, 0x9f, 
    0x25, 0x4a, 0x94, 0x33, 0x66, 0xcc, 0x83, 0x1d, 0x3a, 0x74, 0xe8, 0xcb, 0x8d, 0x01, 0x02, 0x04, 
    0x08, 0x10, 0x20, 0x40, 0x80, 0x1b, 0x36, 0x6c, 0xd8, 0xab, 0x4d, 0x9a, 0x2f, 0x5e, 0xbc, 0x63, 
    0xc6, 0x97, 0x35, 0x6a, 0xd4, 0xb3, 0x7d, 0xfa, 0xef, 0xc5, 0x91, 0x39, 0x72, 0xe4, 0xd3, 0xbd, 
    0x61, 0xc2, 0x9f, 0x25, 0x4a, 0x94, 0x33, 0x66, 0xcc, 0x83, 0x1d, 0x3a, 0x74, 0xe8, 0xcb, 0x8d
};

void PrintHex(unsigned char x){
    if(x / 16 < 10){
        cout << (char)((x / 16) + '0');
    }
    if(x / 16 >= 10){
        cout << (char)((x / 16 - 10) + 'A');
    }

    if(x % 16 < 10){
        cout << (char)((x % 16) + '0');
    }
    if(x % 16 >= 10){
        cout << (char)((x % 16 - 10) + 'A');
    }
}

string char_2_hexStr(unsigned char* bytes, int size) {
	char const hex[16] = { '0', '1', '2', '3', '4', '5', '6', '7', '8', '9', 'A', 'B', 'C', 'D', 'E', 'F'};
	string str;
	for (int i = 0; i < size; ++i) {
		const char ch = bytes[i];
		str.append(&hex[(ch  & 0xF0) >> 4], 1);
		str.append(&hex[ch & 0xF], 1);
	}
	return str;
}

string char_2_str(unsigned char* a, int size){
    string s = "";
	for (int i = 0; i < size; i++) {
        const char ch = a[i];
		s = s + ch;
	}
    s.erase(remove(s.begin(), s.end(), '\0'), s.end());
	return s;
}

string rtrim(string text){
	auto end = text.find_last_not_of(' ');
	return text.substr(0, end + 1);
}

void PrintExplanedKey(unsigned char* arrKey, unsigned int lenArr){
    cout << "\nexpandedKey HEX : \n";
    unsigned int j = 2;
    for (int i = 0; i < lenArr; i++)
    {
        if(i > 0 && i % 4 == 0){
            printf("\n");
            if(i % 16 == 0){
                printf("\n");
                printf("Khoa thu %d: \n\n", j);
                j++;
            }
        }
        PrintHex(arrKey[i]);
        cout<<".";
    }
}

void KeyExpansionCore(unsigned char* in, unsigned char i){
    // Rot(): Dich vong phai 8 bit  
    unsigned int* q = (unsigned int*) in; // chuyen ve hex: VD: 0x3c4fcf09
    *q = (*q >> 8) | ((*q & 0xff) << 24); // 0x003c4fcf OR 0x09000000 --> 0x0930c4fc

    // S-box four bytes:
    // VD: 0x0930c4fc --S-box--> 0x8a84eb01
    in[0] = s[in[0]];   
    in[1] = s[in[1]];   
    in[2] = s[in[2]];   
    in[3] = s[in[3]];   

    // Rcon
    // VD: 0x8a84eb01 --XOR-- 0x01000000 -->  0x8b84eb01
    in[0] ^= Rcon[i];
}

void KeyExpansion(unsigned char* inputKey, unsigned char* expandedKeys){
    // chieu dai key (128/192/256)
    int keyLenInt = std::stoi(keyLen);
    // so byte key (16/24/32)
    int bitKey = keyLenInt / 8;
    // so byte key mo rong (176/208/240)
    int bitKeyEx = (Nr + 1) * 16;


    //cho khoa goc (16/24/32 byte) vao mang expandedKeys[176/208/240]
    for (int i = 0; i < bitKey; i++)
    {
        expandedKeys[i] = inputKey[i];
    }

    //variable
    int bytesGenerated = bitKey;
    // bien luu index Rcon
    int rconInteraction = 1;
    // mang tam luu 4 byte cuoi
    unsigned char temp[4];

    while (bytesGenerated < bitKeyEx) // 176/208/ 240
    {
        // Lay cot cuoi cung luu vao mang tam : temp[4]
        // VD:
        // 1 2 3 4 |
        // 4 3 2 1 | -> temp[4] = {4, 1, 8, 5}
        // 5 6 7 8 |
        // 8 7 6 5 |
        for (int i = 0; i < 4; i++)
        {
            temp[i] = expandedKeys[i + bytesGenerated - 4];
        }  

        // Chi moi cot dau tien cua khoa con thi moi TH KeyExpansionCore
        if(bytesGenerated % bitKey == 0){
            KeyExpansionCore(temp, rconInteraction);
            rconInteraction++;
        }//256
        else if (Nk > 6 && bytesGenerated / 4 % Nk == 4)
        {
            temp[0] = s[temp[0]];   
            temp[1] = s[temp[1]];   
            temp[2] = s[temp[2]];   
            temp[3] = s[temp[3]];   
        }

        // Lay Wi XOR Wi - 4
        for(unsigned char a = 0; a < 4; a++){
            expandedKeys[bytesGenerated] = expandedKeys[bytesGenerated - bitKey] ^ temp[a];
            bytesGenerated++;
        }
    }
}

void SubBytes(unsigned char* state){
    for (int i = 0; i < 16; i++)
    {
        state[i] = s[state[i]];
    }
}

void ShiftRows(unsigned char* state){
    unsigned char tmp[16];

    tmp[0] = state[0];
    tmp[1] = state[5];
    tmp[2] = state[10];
    tmp[3] = state[15];

    tmp[4] = state[4];
    tmp[5] = state[9];
    tmp[6] = state[14];
    tmp[7] = state[3];

    tmp[8] = state[8];
    tmp[9] = state[13];
    tmp[10] = state[2];
    tmp[11] = state[7];

    tmp[12] = state[12];
    tmp[13] = state[1];
    tmp[14] = state[6];
    tmp[15] = state[11];

    for (int i = 0; i < 16; i++)
    {
        state[i] = tmp[i];
    }
}

void MixColumns(unsigned char* state){
    unsigned char tmp[16];

    tmp[0] = (unsigned char)(mul2[state[0]] ^ mul3[state[1]] ^ state[2] ^ state[3]);
    tmp[1] = (unsigned char)(state[0] ^ mul2[state[1]] ^ mul3[state[2]] ^ state[3]);
    tmp[2] = (unsigned char)(state[0] ^ state[1] ^ mul2[state[2]] ^ mul3[state[3]]);
    tmp[3] = (unsigned char)(mul3[state[0]] ^ state[1] ^ state[2] ^ mul2[state[3]]);

    tmp[4] = (unsigned char)(mul2[state[4]] ^ mul3[state[5]] ^ state[6] ^ state[7]);
    tmp[5] = (unsigned char)(state[4] ^ mul2[state[5]] ^ mul3[state[6]] ^ state[7]);
    tmp[6] = (unsigned char)(state[4] ^ state[5] ^ mul2[state[6]] ^ mul3[state[7]]);
    tmp[7] = (unsigned char)(mul3[state[4]] ^ state[5] ^ state[6] ^ mul2[state[7]]);

    tmp[8] = (unsigned char)(mul2[state[8]] ^ mul3[state[9]] ^ state[10] ^ state[11]);
    tmp[9] = (unsigned char)(state[8] ^ mul2[state[9]] ^ mul3[state[10]] ^ state[11]);
    tmp[10] = (unsigned char)(state[8] ^ state[9] ^ mul2[state[10]] ^ mul3[state[11]]);
    tmp[11] = (unsigned char)(mul3[state[8]] ^ state[9] ^ state[10] ^ mul2[state[11]]);

    tmp[12] = (unsigned char)(mul2[state[12]] ^ mul3[state[13]] ^ state[14] ^ state[15]);
    tmp[13] = (unsigned char)(state[12] ^ mul2[state[13]] ^ mul3[state[14]] ^ state[15]);
    tmp[14] = (unsigned char)(state[12] ^ state[13] ^ mul2[state[14]] ^ mul3[state[15]]);
    tmp[15] = (unsigned char)(mul3[state[12]] ^ state[13] ^ state[14] ^ mul2[state[15]]);

    for (int i = 0; i < 16; i++)
    {
        state[i] = tmp[i];
    }
}

void AddRoundKey(unsigned char* state, unsigned char* roundKey){
    for (int i = 0; i < 16; i++)
    {
        state[i] ^= roundKey[i];
    }
}

void AES_Encrypt(unsigned char* message, unsigned char* key){
    // khai bao 1 mang state
    unsigned char state[16];
    // lay tung p.tu cua message sang state
    for (int i = 0; i < 16; i++)
    {
        state[i] = message[i];
    }

    // Dat so vong lap ma hoa
    int numberOfRounds = Nr - 1;

    // ---------------------------------------Mo rong khoa----------------------------------------
    // khai bao mang khoa da duoc mo rong 
    // AES-128: 11 khoa (176 byte)
    // AES-192: 13 khoa (208 byte)
    // AES-256: 15 khoa (240 byte)
    // VD: voi khoa 128 bit -> 10 vong lap -> sinh them 10 khoa + 1 khoa ban dau -> 176 byte (1 khoa co 16 byte)
    unsigned char expandedKey[240];
    KeyExpansion(key, expandedKey);
    // PrintExplanedKey(expandedKey, 240);
    // for (int i = 0; i < 240; i++)
    // {
    //     cout<< expandedKey[i];
    // }
    
    // ----------------------------------------Ma hoa AES-----------------------------------------
    
    AddRoundKey(state, key); 

    for (int i = 0; i < numberOfRounds; i++)
    {
        SubBytes(state);
        ShiftRows(state);
        MixColumns(state);
        // state xor voi tung khoa con tao ra
        AddRoundKey(state, expandedKey + (16 * (i+1)));
    }

    //Final Round
    int bitKeyEx = (Nr + 1) * 16;
    SubBytes(state);
    ShiftRows(state);
    AddRoundKey(state, expandedKey + bitKeyEx-16); 

    for (int i = 0; i < 16; i++)
    {
        message[i] = state[i];
    }
}

void InvShiftRows(unsigned char* state)
{
  unsigned char tmp[16];

    tmp[0] = state[0];
    tmp[1] = state[13];
    tmp[2] = state[10];
    tmp[3] = state[7];

    tmp[4] = state[4];
    tmp[5] = state[1];
    tmp[6] = state[14];
    tmp[7] = state[11];

    tmp[8] = state[8];
    tmp[9] = state[5];
    tmp[10] = state[2];
    tmp[11] = state[15];

    tmp[12] = state[12];
    tmp[13] = state[9];
    tmp[14] = state[6];
    tmp[15] = state[3];

    for (int i = 0; i < 16; i++)
    {
        state[i] = tmp[i];
    }
}

void InvSubBytes(unsigned char* state)
{
    for (int i = 0; i < 16; i++)
    {
        state[i] = InvS[state[i]];
    }
}

void InvMixColumns(unsigned char* state){
    unsigned char tmp[16];

    tmp[0] = (unsigned char)(mulE[state[0]] ^ mulB[state[1]] ^ mulD[state[2]] ^ mul9[state[3]]);
    tmp[1] = (unsigned char)(mul9[state[0]] ^ mulE[state[1]] ^ mulB[state[2]] ^ mulD[state[3]]);
    tmp[2] = (unsigned char)(mulD[state[0]] ^ mul9[state[1]] ^ mulE[state[2]] ^ mulB[state[3]]);
    tmp[3] = (unsigned char)(mulB[state[0]] ^ mulD[state[1]] ^ mul9[state[2]] ^ mulE[state[3]]);

    tmp[4] = (unsigned char)(mulE[state[4]] ^ mulB[state[5]] ^ mulD[state[6]] ^ mul9[state[7]]);
    tmp[5] = (unsigned char)(mul9[state[4]] ^ mulE[state[5]] ^ mulB[state[6]] ^ mulD[state[7]]);
    tmp[6] = (unsigned char)(mulD[state[4]] ^ mul9[state[5]] ^ mulE[state[6]] ^ mulB[state[7]]);
    tmp[7] = (unsigned char)(mulB[state[4]] ^ mulD[state[5]] ^ mul9[state[6]] ^ mulE[state[7]]);

    tmp[8] = (unsigned char)(mulE[state[8]] ^ mulB[state[9]] ^ mulD[state[10]] ^ mul9[state[11]]);
    tmp[9] = (unsigned char)(mul9[state[8]] ^ mulE[state[9]] ^ mulB[state[10]] ^ mulD[state[11]]);
    tmp[10] = (unsigned char)(mulD[state[8]] ^ mul9[state[9]] ^ mulE[state[10]] ^ mulB[state[11]]);
    tmp[11] = (unsigned char)(mulB[state[8]] ^ mulD[state[9]] ^ mul9[state[10]] ^ mulE[state[11]]);

    tmp[12] = (unsigned char)(mulE[state[12]] ^ mulB[state[13]] ^ mulD[state[14]] ^ mul9[state[15]]);
    tmp[13] = (unsigned char)(mul9[state[12]] ^ mulE[state[13]] ^ mulB[state[14]] ^ mulD[state[15]]);
    tmp[14] = (unsigned char)(mulD[state[12]] ^ mul9[state[13]] ^ mulE[state[14]] ^ mulB[state[15]]);
    tmp[15] = (unsigned char)(mulB[state[12]] ^ mulD[state[13]] ^ mul9[state[14]] ^ mulE[state[15]]);

    for (int i = 0; i < 16; i++)
    {
        state[i] = tmp[i];
    }
}

void AES_Decrypt(unsigned char* message, unsigned char* key){
    // khai bao 1 mang state
    unsigned char state[16];
    // lay tung p.tu cua message sang state
    for (int i = 0; i < 16; i++)
    {
        state[i] = message[i];
    }

    // Dat so vong lap giai ma
    int numberOfRounds = Nr - 1;

    unsigned char expandedKey[240];
    KeyExpansion(key, expandedKey);
    // ----------------------------------------GIAI MA AES----------------------------------------
    
    AddRoundKey(state, expandedKey + Nr * 16); 

    for (int i = numberOfRounds; i >= 1; i--)
    {
        InvSubBytes(state);
        InvShiftRows(state);
        AddRoundKey(state, expandedKey + i * 16);
        InvMixColumns(state);
    }

    //Final Round
    InvShiftRows(state);
    InvSubBytes(state);
    AddRoundKey(state, expandedKey);

    // cout << "\nSTATE HEX : ";
    // for (int i = 0; i < 16; i++)
    // {
    //     PrintHex(state[i]);
    // }

    for (int i = 0; i < 16; i++)
    {
        message[i] = state[i];
    }
}

void paddedMessageFuc(string input, string option){
    file_contents = readFile(input);

    if(option == "HEX"){
        file_contents = hexToASCII(file_contents);
    }

    // cout<<"\ninputPATH       :"<< input;
    // cout<<"\nfile_content    :"<< file_contents;

    unsigned char message[1000] ;   //HVHVHVHVHVHVHVHV / E:/SyncDriver/TaiLieu/DAI_HOC/Nam4/Ky1/Coso_ATBM_TT/BTL/TEST/input.txt
    strcpy((char*)message, file_contents.c_str());

    // lay chieu dai text
    int originalLen = strlen((const char*)message);
    lenOfPaddedMessage = originalLen;

    // lay boi so cua 16 gan nhat voi chieu dai text khi text khong chia het cho 16
    if(lenOfPaddedMessage % 16 != 0){
        lenOfPaddedMessage = (lenOfPaddedMessage / 16 + 1) * 16;
    }

    // VD1: input co 18 ky tu -> mang moi phai co 32 ky tu -> tach ra thanh 2 mang con 16 ky tu
    // paddedMessage[32]
    // 1 2 3 4 | 1 0 0 0
    // 4 3 2 1 | 2 0 0 0
    // 5 6 7 8 | 0 0 0 0
    // 8 7 6 5 | 0 0 0 0

    // VD2: input co 12 ky tu -> mang moi phai co 16 ky tu
    // paddedMessage[12]
    // 1 2 3 0
    // 4 3 2 0 
    // 5 6 7 0 
    // 8 7 6 0 
    paddedMessage = new unsigned char[lenOfPaddedMessage];
    for (int i = 0; i < lenOfPaddedMessage; i++)
    {
        if(i >= originalLen){
            paddedMessage[i] = 0;
        }else{
            paddedMessage[i] = message[i];
        }
    }
}

void checkLen(string bitLen, string key){
    int bitLenInt = std::stoi(bitLen);
    int keyLen = key.length()*8;

    if(bitLenInt != keyLen){
        cout<< "\nERROR: Khoa AES-" << bitLen << " phai bao gom " << bitLenInt/8 << " ky tu\n\n"; 

        cout << "Nhap key:";
        getline (cin, keyInput);

        checkLen(bitLen, keyInput);
    }
}

int main(){
    cout << "Nhap do dai khoa:(128,192,256):";
    getline (cin, keyLen);
    cout << "Nhap key:";
    getline (cin, keyInput);

    checkLen(keyLen, keyInput);

    cout << "Nhap path:";
    getline (cin, input);


    unsigned char key[256];         //12345678123456781234567812345678
    strcpy((char*)key, keyInput.c_str());

    int keyLenInt = std::stoi(keyLen);
    Nk = keyLenInt / 32;
    Nr = Nk + 6;

    //-----------------------------------ENCRYPT----------------------------------

    //doc file input dau vao
    paddedMessageFuc(input, "");

    cout << "\nINPUT HEX     : ";
    cout << char_2_hexStr(paddedMessage, lenOfPaddedMessage);
    cout << "\nKEY   HEX     : ";
    cout << char_2_hexStr(key, keyLenInt / 8);

    // Get starting timepoint
    auto start_encrypt = high_resolution_clock::now();

    //ma hoa phan text them > 16 kytu
    for (int i = 0; i < lenOfPaddedMessage; i += 16){
        // VD: inputLength > 16 byte 
        // paddedMessage + 0  : Chi ma hoa 16 ptu tu 0->15
        // paddedMessage + 16 : Chi ma hoa 16 ptu tu 16->31
        AES_Encrypt(paddedMessage+i, key);
    }

    // Get ending timepoint
    auto stop_encrypt = high_resolution_clock::now();

    auto duration_encrypt = duration_cast<milliseconds>(stop_encrypt - start_encrypt);

    string banmaHEX = char_2_hexStr(paddedMessage, lenOfPaddedMessage);
    // string banmaTEXT = char_2_str(paddedMessage, lenOfPaddedMessage);
    // string path_bm = "E:/SyncDriver/TaiLieu/DAI_HOC/Nam4/Ky1/Coso_ATBM_TT/BTL/TEST/banma.txt";
    string path_bm = ReplaceAll(string(input), std::string("input.txt"), std::string("banma.txt"));
    
    cout << "\n\n-----ENCRYPTION-----";
    cout << "\nEncrypted HEX : " << banmaHEX;
    // cout << "\nEncrypted TEXT: " << banmaTEXT;
    cout << "\nEncrypted PATH: " << path_bm;
    cout << "\nTime Encrypt  : " << (double)duration_encrypt.count()/1000 << " seconds";
    writeFile(banmaHEX, path_bm);

    //---------------------------DECRYPT----------------------------

    //doc file ban ma
    paddedMessageFuc(path_bm, "HEX");

    // cout << "\nDecrypted HEX : ";
    // for (int i = 0; i < lenOfPaddedMessage; i++)
    // {
    //     /* code */
    //     PrintHex(paddedMessage[i]);
    // }
    
    // Get starting timepoint
    auto start_decrypt = high_resolution_clock::now();

    for (int i = 0; i < lenOfPaddedMessage; i += 16){
        AES_Decrypt(paddedMessage+i, key); 
    }

    // Get ending timepoint
    auto stop_decrypt = high_resolution_clock::now();

    auto duration_decrypt = duration_cast<milliseconds>(stop_decrypt - start_decrypt);

    string banroHEX = char_2_hexStr(paddedMessage, lenOfPaddedMessage);
    string banroTEXT = char_2_str(paddedMessage, lenOfPaddedMessage);
    // string path_br = "E:/SyncDriver/TaiLieu/DAI_HOC/Nam4/Ky1/Coso_ATBM_TT/BTL/TEST/banro.txt";
    string path_br = ReplaceAll(string(input), std::string("input.txt"), std::string("banro.txt"));
    cout << "\n\n-----DECRYPTION-----";
    cout << "\nDecrypted HEX : " << banroHEX;
    cout << "\nDecrypted TEXT: " << banroTEXT;
    cout << "\nDecrypted PATH: " << path_br;
    cout << "\nTime Encrypt  : " << (double)duration_decrypt.count()/1000 << " seconds";
    writeFile(banroTEXT, path_br);

    _getch();    
    delete[] paddedMessage;

    return 0;
}
